=begin
#Sezzle API

#The Sezzle API is intended for merchants interested in accepting Sezzle Pay as a payment option.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

module SezzleClient
  class SessionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get session status
    # @param session_uuid Session UUID
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def get_v2_session(session_uuid, opts = {})
      data, _status_code, _headers = get_v2_session_with_http_info(session_uuid, opts)
      data
    end

    # Get session status
    # @param session_uuid Session UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def get_v2_session_with_http_info(session_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionApi.get_v2_session ...'
      end
      # verify the required parameter 'session_uuid' is set
      if @api_client.config.client_side_validation && session_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'session_uuid' when calling SessionApi.get_v2_session"
      end
      # resource path
      local_var_path = '/session/{session_uuid}'.sub('{' + 'session_uuid' + '}', session_uuid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200'

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#get_v2_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new session
    # Create new customer checkout and/or tokenize customer
    # @param body Session request
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2011]
    def post_v2_session(body, opts = {})
      data, _status_code, _headers = post_v2_session_with_http_info(body, opts)
      data
    end

    # Create a new session
    # Create new customer checkout and/or tokenize customer
    # @param body Session request
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2011, Integer, Hash)>] InlineResponse2011 data, response status code and response headers
    def post_v2_session_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionApi.post_v2_session ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SessionApi.post_v2_session"
      end
      # resource path
      local_var_path = '/session'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'InlineResponse2011'

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#post_v2_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
