=begin
#Sezzle API

#The Sezzle API is intended for merchants interested in accepting Sezzle Pay as a payment option.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

module SezzleClient
  class ReportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Interest Account Activity
    # @param start_date Start Date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :end_date End Date
    # @option opts [String] :offset Pagination Offset (Limit 20)
    # @option opts [String] :currency_code ISO-4217 Currency Code
    # @return [String]
    def get_interest_account_activity(start_date, opts = {})
      data, _status_code, _headers = get_interest_account_activity_with_http_info(start_date, opts)
      data
    end

    # Interest Account Activity
    # @param start_date Start Date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :end_date End Date
    # @option opts [String] :offset Pagination Offset (Limit 20)
    # @option opts [String] :currency_code ISO-4217 Currency Code
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_interest_account_activity_with_http_info(start_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_interest_account_activity ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ReportsApi.get_interest_account_activity"
      end
      # resource path
      local_var_path = '/interest/activity'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start-date'] = start_date
      query_params[:'end-date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'currency-code'] = opts[:'currency_code'] if !opts[:'currency_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'String'

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_interest_account_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Interest Account Balance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_code ISO-4217 Currency Code
    # @return [InlineResponse2009]
    def get_interest_account_balance(opts = {})
      data, _status_code, _headers = get_interest_account_balance_with_http_info(opts)
      data
    end

    # Interest Account Balance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_code ISO-4217 Currency Code
    # @return [Array<(InlineResponse2009, Integer, Hash)>] InlineResponse2009 data, response status code and response headers
    def get_interest_account_balance_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_interest_account_balance ...'
      end
      # resource path
      local_var_path = '/interest/balance'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currency-code'] = opts[:'currency_code'] if !opts[:'currency_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse2009'

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_interest_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Settlement Details
    # @param payout_uuid Payout UUID
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_settlement_details(payout_uuid, opts = {})
      data, _status_code, _headers = get_settlement_details_with_http_info(payout_uuid, opts)
      data
    end

    # Settlement Details
    # @param payout_uuid Payout UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_settlement_details_with_http_info(payout_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_settlement_details ...'
      end
      # verify the required parameter 'payout_uuid' is set
      if @api_client.config.client_side_validation && payout_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'payout_uuid' when calling ReportsApi.get_settlement_details"
      end
      # resource path
      local_var_path = '/settlements/details/{payout_uuid}'.sub('{' + 'payout_uuid' + '}', payout_uuid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'String'

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_settlement_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Settlement Summaries
    # @param start_date Start Date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :end_date End Date
    # @option opts [String] :offset Pagination Offset (Limit 20)
    # @option opts [String] :currency_code ISO-4217 Currency Code
    # @return [Payout]
    def get_settlement_summaries(start_date, opts = {})
      data, _status_code, _headers = get_settlement_summaries_with_http_info(start_date, opts)
      data
    end

    # Settlement Summaries
    # @param start_date Start Date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :end_date End Date
    # @option opts [String] :offset Pagination Offset (Limit 20)
    # @option opts [String] :currency_code ISO-4217 Currency Code
    # @return [Array<(Payout, Integer, Hash)>] Payout data, response status code and response headers
    def get_settlement_summaries_with_http_info(start_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_settlement_summaries ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ReportsApi.get_settlement_summaries"
      end
      # resource path
      local_var_path = '/settlements/summaries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start-date'] = start_date
      query_params[:'end-date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'currency-code'] = opts[:'currency_code'] if !opts[:'currency_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Payout'

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_settlement_summaries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
